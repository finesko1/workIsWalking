public function saveUserSolution(Request $request, $groupId, $sectionName)
    {
        $taskSection = Material::where('section', $sectionName)->first();
        if (!$taskSection) {
            return response()->json(['error' => "Не существует задания $sectionName"], 200, [], JSON_UNESCAPED_UNICODE);
        }

        $materialLinks = Material_links::where('material_id', $taskSection->id)->get();
        if ($materialLinks->isEmpty()) {
            return response()->json(['error' => 'Связь с материалом не найдена'], 404);
        }

        $userId = auth()->user()->id;
        $taskMaterialDeadlines = TaskMaterialDeadline::whereIn('material_link_id', $materialLinks->pluck('id'))
            ->where('user_id', $userId)
            ->get();

        if ($taskMaterialDeadlines->isEmpty()) {
            return response()->json(['error' => 'Срок для этого задания не найден, либо у вас нет к нему доступа'], 404, [], JSON_UNESCAPED_UNICODE);
        }

        if ($request->hasFile('solution_files')) {
            foreach ($taskMaterialDeadlines as $taskMaterialDeadline) {
                $directoryPath = "groups/{$groupId}/tasks/{$sectionName}/answers/{$userId}";

                // Удаление существующих файлов в каталоге
                Storage::disk('public')->deleteDirectory($directoryPath);

                // Удаление существующих записей решения пользователя
                UserSolution::where('user_id', $userId)
                    ->where('task_material_deadline_id', $taskMaterialDeadline->id)
                    ->delete();

                $files = $request->file('solution_files');
                foreach ($files as $file) {
                    // Проверка на ошибки загрузки файла
                    if ($file->isValid()) {
                        // Сохранение нового файла
                        $filePath = $file->storeAs($directoryPath, $file->getClientOriginalName(), 'public');

                        // Сохранение информации о новом решении в БД
                        $solution = new UserSolution();
                        $solution->user_id = $userId;
                        $solution->task_material_deadline_id = $taskMaterialDeadline->id;
                        $solution->solution_file = basename($filePath);
                        $solution->save();
                    } else {
                        return response()->json(['error' => 'Ошибка загрузки файла: ' . $file->getError()], 400);
                    }
                }
            }

            return response()->json(['message' => 'Решения успешно обновлены'], 200, [], JSON_UNESCAPED_UNICODE);
        }

        return response()->json(['error' => 'Файлы не были загружены'], 400);
    }



    public function getAccessUsers($groupId, $sectionName, $taskName) {
            try {
                $user = auth()->user();
                if (!$user) {
                    return response()->json(['error' => 'Пользователь не авторизован'], 401);
                }

                // Проверка существования группы
                Group::findOrFail($groupId);

                // Определение роли пользователя в группе
                $userRole = $this->getUserRole($user->id, $groupId);
                if ($userRole !== 'admin') {
                    return response()->json(['error' => 'Недостаточно прав']);
                }

                $taskSection = Material::where('section', $sectionName)->first();
                if (!$taskSection) {
                    return response()->json(['error' => "Не существует задания $sectionName"], 200, [], JSON_UNESCAPED_UNICODE);
                }
                $materialIds = Material_links::where('material_id', $taskSection->id)->pluck('id');

                $accessUsers = $materialIds->map(function($materialId) use ($groupId, $sectionName) {
                    $taskMaterialDeadlines = TaskMaterialDeadline::where('material_link_id', $materialId)->get();
                    $taskDirectory = 'groups/' . $groupId . '/tasks/' . $sectionName . '/answers/';

                    return $taskMaterialDeadlines->map(function ($deadline) use ($taskDirectory) {
                        $userSolutions = UserSolution::where('task_material_deadline_id', $deadline->id)->get();
                        $user = User::find($deadline->user_id);
                        $userData = $this->getUsersData($user);

                        $files = $userSolutions->map(function ($solution) use ($taskDirectory) {
                            $filePath = $taskDirectory . $solution->user_id . '/' . $solution->solution_file;
                            return Storage::disk('public')->exists($filePath) ? Storage::disk('public')->url($filePath) : null;
                        })->filter();

                        return [
                            'userData' => $userData,
                            'files' => $files,
                        ];
                    });
                });

                return response()->json(['message' => 'Запрос выполнен успешно', 'usersData' => $accessUsers], 200);
            } catch (\Exception $e) {
                return response()->json(['error' => 'Ошибка при получении данных заданий', 'errors' => $e->getMessage()], 500);
            }
        }
